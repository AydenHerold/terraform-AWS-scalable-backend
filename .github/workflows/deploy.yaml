name: Deploy Infrastructure and Application (OIDC Auth)

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

permissions:
  contents: read
  pull-requests: write
  id-token: write

jobs:
  terraform:
    name: "Terraform"
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Configure AWS credentials via OIDC
        uses: aws-actions/configure-aws-credentials@v4
        with:
          audience: sts.amazonaws.com
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
          aws-region: ${{ vars.AWS_REGION }}
          
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.4.6

      - name: Terraform Format Check
        id: fmt
        run: terraform fmt -check

      - name: Terraform Init
        id: init
        run: terraform init

      - name: Terraform Validate
        id: validate
        run: terraform validate

      - name: Terraform Plan
        id: plan
        if: github.event_name == 'pull_request'
        run: terraform plan -var-file=terraform.tfvars -no-color -detailed-exitcode
        continue-on-error: true

      - name: Update Pull Request with Plan results
        uses: actions/github-script@v7
        if: github.event_name == 'pull_request'
        env:
          PLAN: "${{ steps.plan.outputs.stdout }}"
          PLAN_OUTCOME: "${{ steps.plan.outcome }}"
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const plan_outcome = process.env.PLAN_OUTCOME;
            const plan_output = process.env.PLAN;
            let plan_status = 'unknown';
            if (plan_outcome === 'success') { plan_status = 'Success ‚úÖ'; }
            else if (plan_outcome === 'failure') { plan_status = 'Failure ‚ùå'; }
            else { plan_status = 'Skipped ‚è≠Ô∏è'; }

            const output = `#### Terraform Workflow Summary ü§ñ
            * **Format Check**: \`${{ steps.fmt.outcome }}\`
            * **Initialization**: \`${{ steps.init.outcome }}\`
            * **Validation**: \`${{ steps.validate.outcome }}\`
            * **Plan Status**: \`${plan_status}\`

            <details><summary>Show Terraform Plan Output</summary>

            \`\`\`terraform
            ${plan_output}
            \`\`\`

            </details>`;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            });
            // Optional: Fail check run if plan failed
            // if (plan_outcome === 'failure') { core.setFailed('Terraform Plan Failed!'); }

      - name: Terraform Apply
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        env:
          TF_VAR_db_password: ${{ secrets.DB_PASSWORD }}
          TF_LOG: DEBUG
        run: terraform apply -var-file=terraform.tfvars -auto-approve

  deploy-app:
    name: "Deploy Application Assets"
    needs: terraform
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    runs-on: ubuntu-latest

    permissions:
      id-token: write
      contents: read

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials via OIDC
        uses: aws-actions/configure-aws-credentials@v4
        with:
          audience: sts.amazonaws.com
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
          aws-region: ${{ vars.AWS_REGION }}

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"
          # cache: 'npm'
          # cache-dependency-path: app/package-lock.json

      - name: Install dependencies
        working-directory: ./app
        run: npm ci

      - name: Build application
        working-directory: ./app
        run: npm run build

      - name: Deploy frontend assets to S3
        run: |
          aws s3 sync ./app/build/ s3://${{ vars.ASSETS_BUCKET_NAME }} --delete --acl private
          echo "Synced build artifacts to s3://${{ vars.ASSETS_BUCKET_NAME }}"

      - name: Invalidate CloudFront cache
        run: |
          echo "Invalidating CloudFront cache for distribution ${{ vars.CLOUDFRONT_DISTRIBUTION_ID }}"
          aws cloudfront create-invalidation --distribution-id ${{ vars.CLOUDFRONT_DISTRIBUTION_ID }} --paths "/*"
          echo "CloudFront invalidation request submitted."
